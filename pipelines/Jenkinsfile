pipeline {
  options {
    disableConcurrentBuilds()
  }

  environment {
    CONTEXT_NAME    = 'etendo'
    BBDD_SID        = 'etendo'
    BBDD_PORT       = '5432'
    BBDD_SYSTEMUSER = 'postgres'
    BBDD_SYSTEMPASS = 'syspass'
    BBDD_USER       = 'tad'
    BBDD_PASSWORD   = 'tad'
    NEXUS_USER      = credentials('nexus-admin-user')
    NEXUS_PASSWORD  = credentials('nexus-admin-passwd')
    GITHUB_USER     = 'etendobot'
    GITHUB_TOKEN    = credentials('github-read-package-token')
    ACCESS_TOKEN    = credentials('access_token_github')
    EMAIL_ADDRESS   = credentials('email_builds')
    CONTEXT_BUILD   = 'Module Tests'

    COMMIT_AUTHOR_NAME  = sh(returnStdout: true, script: "git log -1 --pretty=format:'%an'").trim()
    COMMIT_AUTHOR_EMAIL = sh(returnStdout: true, script: "git log -1 --pretty=format:'%ae'").trim()

    ETENDO_BASE_URL   = 'https://github.com/etendosoftware/etendo_base'
    DOCKER_MODULE_URL = 'https://github.com/etendosoftware/com.etendoerp.docker'

    TOMCAT_URL      = 'https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.98/bin/apache-tomcat-9.0.98.tar.gz'
    JAVA_HOME       = '/usr/lib/jvm/java-11-openjdk-amd64'
    MODULE_PACKAGE  = 'com.etendoerp.docker'
    ETENDO_BASE     = 'etendo_base'

    COMMIT_INPROGRESS_STATUS = 'pending'
    COMMIT_SUCCESS_STATUS    = 'success'
    COMMIT_FAILED_STATUS     = 'failure'

    SUCCESS  = 'SUCCESS'
    FAILED   = 'FAILED'
    UNSTABLE = 'UNSTABLE'

    NEXT_CLASSIC_VERSION = '25.3.0'
    BASE_BRANCH_BACKPORT = "release/24.4"
    MAIN_BRANCH          = "main"
  }

  agent { // MARK: - Agent
    kubernetes {
      inheritFrom 'jenkins-node-rx'
      defaultContainer 'jnlp'
      yaml """
apiVersion: v1
kind: Pod
metadata:
  name: jenkins-node-pg-0
  namespace: jenkins2025
  labels:
    app.kubernetes.io/name: jenkins-node-pg
spec:
  volumes:
    - name: rsa-keys
      configMap:
        name: rsa-keys
        defaultMode: 384
    - name: dind-storage
      emptyDir: {}           # local cache images for dind
  containers:
    - name: compiler
      image: etendo/compiler_jenkins:1.0.6
      env:
        - name: DOCKER_HOST
          value: tcp://localhost:2375
      securityContext:
        privileged: true
        runAsUser: 0
      ports:
        - name: ssh
          containerPort: 22
          protocol: TCP
        - name: visualvm
          containerPort: 8000
          protocol: TCP
      resources:
        requests:
          cpu: 1072m
          memory: 4000Mi
        limits:
          cpu: 2072m
          memory: 6500Mi
      volumeMounts:
        - name: rsa-keys
          mountPath: /root/.ssh/
      lifecycle:
        postStart:
          exec:
            command:
              - bash
              - -lc
              - |
                set -e
                apt-get update -y
                command -v docker >/dev/null || apt-get install -y docker.io
                apt-get install -y curl
      imagePullPolicy: IfNotPresent
    - name: dind
      image: docker:25-dind
      securityContext:
        privileged: true
      env:
        - name: DOCKER_TLS_CERTDIR
          value: ""            # without TLS inside the pod
      args:
        - --mtu=1450           # adjust if your CNI requires it
        - --storage-driver=overlay2
      volumeMounts:
        - name: dind-storage
          mountPath: /var/lib/docker
  restartPolicy: Always
  terminationGracePeriodSeconds: 30
  dnsPolicy: ClusterFirst
  serviceAccountName: default
  serviceAccount: default
  securityContext: {}
  """
    }
  }

  stages {
    stage('Wait for DinD') { // MARK: - Wait for DinD
      steps {
        container('compiler') {
          script {
            try {
              echo '---------------- Waiting for DinD to be ready ----------------'
              timeout(time: 60, unit: 'SECONDS') {
                int i = 0
                waitUntil {
                  i++
                  int rc = sh(returnStatus: true, script: 'docker version >/dev/null 2>&1')
                  if (rc == 0) {
                    echo "✅ DinD is ready (after ${i} checks)"
                    return true
                  } else {
                    echo "⏳ Waiting for DinD... attempt ${i}"
                    sleep 2
                    return false
                  }
                }
              }
              currentBuild.result = SUCCESS
            } catch (Exception e) {
              echo '---------------- Build environment Failed ----------------'
              echo "Exception occurred: " + e.toString()
              currentBuild.result = FAILED
              error('Build Failed')
            }
          }
        }
      }
    }
    stage ('Build Enviroment') { // MARK: - Build Environment
      when {
        expression { currentBuild.result == SUCCESS }
      }
      steps {
        container('compiler') {
          script {
            try {
              sh "./pipelines/utils/build-update.sh ${MODULE_PACKAGE} ${COMMIT_INPROGRESS_STATUS} \"Starting build\" ${ACCESS_TOKEN} ${GIT_COMMIT} ${BUILD_URL} \"${CONTEXT_BUILD}\""

              echo '---------------- Choice of etendo_base branch ----------------'
              env.BASE_BRANCH = env.MAIN_BRANCH
              if (env.GIT_BRANCH.contains("-Y") || env.GIT_BRANCH.startsWith("release")) {
                  env.BASE_BRANCH = env.BASE_BRANCH_BACKPORT
              }

              echo '--------------- Building Etendo environment ----------------'
              sh "git clone ${ETENDO_BASE_URL}"

              echo "--------------- Building Etendo environment ----------------"

              sh "wget -O apache-tomcat.tar.gz ${TOMCAT_URL}"
              sh "tar -xvf apache-tomcat.tar.gz -C ${WORKSPACE} > /dev/null 2>&1"

              env.TOMCAT_FOLDER = sh(script: "basename ${TOMCAT_URL} .tar.gz", returnStdout: true).trim()
              env.CATALINA_HOME = "${WORKSPACE}/${TOMCAT_FOLDER}"
              env.CATALINA_BASE = "${WORKSPACE}/${TOMCAT_FOLDER}"

              sh """
              cd ${ETENDO_BASE}
              git checkout ${env.BASE_BRANCH}

              echo "\n
              context.name=${CONTEXT_NAME}
              bbdd.sid=${BBDD_SID}
              bbdd.port=${BBDD_PORT}
              bbdd.systemUser=${BBDD_SYSTEMUSER}
              bbdd.systemPassword=${BBDD_SYSTEMPASS}
              bbdd.user=${BBDD_USER}
              bbdd.password=${BBDD_PASSWORD}
              nexusUser=${NEXUS_USER}
              nexusPassword=${NEXUS_PASSWORD}
              githubUser=${GITHUB_USER}
              githubToken=${GITHUB_TOKEN}
              allow.root=true
              org.gradle.vfs.watch=false
              docker_com.etendoerp.docker_db=true
              org.gradle.jvmargs=-Dfile.encoding=UTF-8
              org.gradle.daemon=false
              java.version=11" > gradle.properties
              """

              echo '---------------- Add dependencies ----------------'

              def buildGradleContent = """
                dependencies {
                    implementation(\"com.etendoerp.platform:etendo-core:[24.4.0,${NEXT_CLASSIC_VERSION})\")
                }
              """
              sh """
              cd ${ETENDO_BASE}
              echo '${buildGradleContent}' >> build.gradle
              """
              echo '---------------- Verifying Docker Containers ----------------'
              sh '''
                bash -lc '
                  set -euo pipefail
                  echo "DOCKER_HOST=${DOCKER_HOST:-<empty>}"
                  docker version
                  docker info
                  docker run --rm hello-world
                '
              '''
              echo '---------------- Build & Compile ----------------'
              sh """
                cd ${ETENDO_BASE}
                mkdir -p modules
                cd modules
                git clone ${DOCKER_MODULE_URL}.git
                cd ${MODULE_PACKAGE}
                git checkout ${GIT_COMMIT}
                cd ../..
                ./gradlew prepareConfig
                ./gradlew setup
                ./gradlew resources.up --info
              """
              def pgIp = sh(
                script: "docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' etendo-db-1",
                returnStdout: true
              ).trim()
              def confFile = "${ETENDO_BASE}/gradle.properties"
              sh """
                echo Postgres IP: ${pgIp}
                # Replace or add dbdd.url
                if grep -q '^bbdd.url=' ${confFile}; then
                  sed -i  "s|^bbdd.url=.*|bbdd.url=jdbc:postgresql://${pgIp}:${BBDD_PORT}|" ${confFile}
                else
                  echo "bbdd.url=jdbc:postgresql://${pgIp}:${BBDD_PORT}" >> ${confFile}
                fi
                cd ${ETENDO_BASE}
                ./gradlew setup
              """

              echo '---------------- Verifying Docker Containers ----------------'
              sleep time: 15, unit: 'SECONDS'
              def dockerPsOutput = sh(script: 'docker ps', returnStdout: true)
              echo "${dockerPsOutput}"
              if (!dockerPsOutput.contains("etendo-db-1")) {
                error('The etendo-db-1 container is not running')
              }
              echo "Docker Containers are running"

              sh """
                cd ${ETENDO_BASE}
                ./gradlew install
                ./gradlew smartbuild
              """
              sh "${WORKSPACE}/${TOMCAT_FOLDER}/bin/catalina.sh start"
              def timeout = 60 // Timeout in seconds
              def interval = 5 // Interval between checks in seconds
              def elapsed = 0
              def tomcatReady = false
              def tomcatResponse = "";
              def url = "http://localhost:8080/${CONTEXT_NAME}/security/Login_FS.html"
              while (elapsed < timeout) {
                try {
                  tomcatResponse = sh(
                    script: "curl -s -o /dev/null -w \"%{http_code}\" ${url}",
                    returnStdout: true
                  ).trim()
                  echo "Tomcat response code: ${tomcatResponse}"
                } catch (e) {
                  tomcatResponse = "000"
                }

                if (tomcatResponse == "200") {
                  tomcatReady = true
                  break
                }

                echo "Tomcat not ready yet. Response code: ${tomcatResponse}. Retrying in ${interval} seconds..."
                sleep interval
                elapsed += interval
              }
              if (!tomcatReady) {
                error("Tomcat did not start within the timeout period of ${timeout} seconds.")
              }
              echo "Tomcat response code: ${tomcatResponse}"
              if (tomcatResponse != "200") {
                error("Tomcat did not respond with 200. Response code: ${tomcatResponse}")
              }

              echo "-------------------- Stopping Tomcat --------------------"
              sh "${WORKSPACE}/${TOMCAT_FOLDER}/bin/catalina.sh stop"

              sh """
              cd ${ETENDO_BASE}
              ./gradlew resources.stop
              """

              sleep time: 30, unit: 'SECONDS'
              dockerPsOutput = sh(script: 'docker ps', returnStdout: true)
              echo "${dockerPsOutput}"
              if (dockerPsOutput.contains("etendo-db-1") && !dockerPsOutput.contains("Exited")) {
                error('The etendo-db-1 container still running')
              }
              currentBuild.result = SUCCESS
            } catch (Exception e) {
              echo '---------------- Build environment Failed ----------------'
              echo "Exception occurred: " + e.toString()
              currentBuild.result = FAILED
              error('Build Failed')
            }
          }
        }
      }
    }
  }

  post {
    always {
      container('compiler') {
        script {
          echo '---------------- Cleaning up Etendo environment ----------------'
          try {
            sh """
              cd ${ETENDO_BASE}
              ./gradlew resources.down
            """

          } catch (Exception e) {
            echo "⚠️ Cleanup failed: ${e.getMessage()}"
          }
        }
      }
    }

    success {
      container('compiler') {
        script {
          sh "./pipelines/utils/build-update.sh ${MODULE_PACKAGE} ${COMMIT_SUCCESS_STATUS} \"Successful Docker Test\" ${ACCESS_TOKEN} ${GIT_COMMIT} ${BUILD_URL} \"${CONTEXT_BUILD}\""
        }
      }
    }

    fixed {
      mail to: EMAIL_ADDRESS,
      subject: "✅ FIXED - ${currentBuild.fullDisplayName}",
      mimeType: 'text/html',
      body: """
      <html>
          <head>
              <style>
                  body { font-family: 'Arial', sans-serif; }
                  .header { font-size: 16px; font-weight: bold; color: #333; }
              </style>
          </head>
          <body>
              <p><em>${new Date()}</em></p>
              <p>__________________________________________________________</p>

              <h2 class="header">✅ ERRORS FIXED ✅</h2>

              <p>
                  <strong>Commit:</strong> <a href="${DOCKER_MODULE_URL}/commits/${env.GIT_COMMIT}">${DOCKER_MODULE_URL}/commits/${env.GIT_COMMIT}</a><br />
                  <strong>Author:</strong> ${COMMIT_AUTHOR_NAME} (${COMMIT_AUTHOR_EMAIL})
              </p>
              <p>
                  The build has been fixed.<br />
                  💡 This build was on the ${MODULE_PACKAGE} module.<br />
                  For more information about the run, visit:<br />
                  <a href="${env.BUILD_URL}">${env.BUILD_URL}</a>
              </p>
              <p>__________________________________________________________</p>
          </body>
      </html>
      """
    }
    failure {
      container('compiler') {
        script {
          sh "./pipelines/utils/build-update.sh ${MODULE_PACKAGE} ${COMMIT_FAILED_STATUS} \"Build Failed\" ${ACCESS_TOKEN} ${GIT_COMMIT} ${BUILD_URL} \"${CONTEXT_BUILD}\""
        }
      }
      mail to: EMAIL_ADDRESS,
      subject: "⛔ ERROR - ${currentBuild.fullDisplayName}",
      mimeType: 'text/html',
      body:  """
      <html>
          <head>
              <style>
                  body { font-family: 'Arial', sans-serif; }
                  .header { font-size: 16px; font-weight: bold; color: #333; }
              </style>
          </head>
          <body>
              <p><em>${new Date()}</em></p>
              <p>__________________________________________________________</p>

              <h2 class="header">🚫 BUILD FAILED 🚫</h2>

              <p>
                  <strong>Commit:</strong> <a href="${DOCKER_MODULE_URL}/commits/${env.GIT_COMMIT}">${DOCKER_MODULE_URL}/commits/${env.GIT_COMMIT}</a><br />
                  <strong>Author:</strong> ${COMMIT_AUTHOR_NAME} (${COMMIT_AUTHOR_EMAIL})
              </p>
              <p>
                  The build has failed unexpectedly.<br />
                  💡 This build was on the ${MODULE_PACKAGE} module.<br />
                  To more information on the failing run visit:<br />
                  <a href="${env.BUILD_URL}">${env.BUILD_URL}</a>
              </p>
      __________________________________________________________
      """
    }
  }
}
