// Calculates the Java version from JAVA_HOME
def calculateJavaVersion() {
    def javaVersion = sh(script: "echo ${JAVA_HOME} | awk -F'/' '{print \$NF}'", returnStdout: true).trim()
    return javaVersion
}

// Generates the stack message using calculated values
def generateStackMessage() {
    def javaVersion = calculateJavaVersion()

    def stackMessage = "ðŸ’¡ The stack for this execution is: " +
                      "\n  - Java: ${javaVersion}"

    return stackMessage
}

pipeline {
  options {
    disableConcurrentBuilds()
    buildDiscarder(logRotator(numToKeepStr: '7', artifactNumToKeepStr: '7'))
  }

  environment {
    CONTEXT_NAME    = "etendo"
    BBDD_SID        = "etendo"
    BBDD_PORT       = "5432"
    BBDD_SYSTEMUSER = "postgres"
    BBDD_SYSTEMPASS = "syspass"
    BBDD_USER       = "tad"
    BBDD_PASSWORD   = "tad"
    NEXUS_USER      = credentials('nexus-admin-user')
    NEXUS_PASSWORD  = credentials('nexus-admin-passwd')
    GITHUB_USER     = "etendobot"
    GITHUB_TOKEN    = credentials('github-read-package-token')
    EMAIL_ADDRESS   = credentials('email_builds')

    ETENDO_BASE_URL = "https://github.com/etendosoftware/etendo_base"

    JAVA_HOME       = "/usr/lib/jvm/java-11-openjdk-amd64"

    SUCCESS         = "SUCCESS"
    FAILED          = "FAILED"
    UNSTABLE        = "UNSTABLE"
  }

  agent {
    kubernetes {
        inheritFrom 'jenkins-node-pg'
        defaultContainer 'jnlp'
        yaml """
apiVersion: v1
kind: Pod
metadata:
  name: jenkins-node-pg-0
  namespace: jenkins
  labels:
    app.kubernetes.io/name: jenkins-node-pg
spec:
  volumes:
    - name: rsa-keys
      configMap:
        name: rsa-keys
        defaultMode: 384
    - name: docker-sock
      hostPath:
        path: /var/run/docker.sock
        type: ''
  containers:
    - name: compiler
      image: etendo/compiler_jenkins:1.0.6
      ports:
        - name: ssh
          containerPort: 22
          protocol: TCP
        - name: visualvm
          containerPort: 8000
          protocol: TCP
      resources:
        requests:
          cpu: 1072m
          memory: 4000Mi
        limits:
          cpu: 2072m
          memory: 6500Mi
      volumeMounts:
        - name: rsa-keys
          mountPath: /root/.ssh/
        - name: docker-sock
          mountPath: /var/run/docker.sock
      lifecycle:
        postStart:
          exec:
            command:
              - bash
              - '-c'
              - >-
                chmod a+x /var/run/docker.sock && rm
                /etc/apt/sources.list.d/pgdg.list || echo 0 && apt update && apt
                install -y curl
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      imagePullPolicy: IfNotPresent
  restartPolicy: Always
  terminationGracePeriodSeconds: 30
  dnsPolicy: ClusterFirst
  serviceAccountName: default
  serviceAccount: default
  securityContext: {}
  """
    }
  }

  stages {
    stage ('Build Enviroment') {
      steps {
        container('compiler') {
          script {
            try {
              echo "---------------- Print environment ----------------"
              sh "printenv"

              echo "--------------- Building Etendo environment ----------------"
              sh """
              git clone $ETENDO_BASE_URL
              cd etendo_base

              echo -e "context.name=${CONTEXT_NAME}
              bbdd.sid=${BBDD_SID}
              bbdd.port=${BBDD_PORT}
              bbdd.systemUser=${BBDD_SYSTEMUSER}
              bbdd.systemPassword=${BBDD_SYSTEMPASS}
              bbdd.user=${BBDD_USER}
              bbdd.password=${BBDD_PASSWORD}
              nexusUser=${NEXUS_USER}
              nexusPassword=${NEXUS_PASSWORD}
              githubUser=${GITHUB_USER}
              githubToken=${GITHUB_TOKEN}
              allow.root=true
              org.gradle.vfs.watch=false
              docker_com.etendoerp.docker_db=true
              org.gradle.jvmargs=-Dfile.encoding=UTF-8" > gradle.properties
              """

              echo "---------------- Add dependencies ----------------"

              def buildGradleContent = """
                dependencies {
                    implementation(\"com.etendoerp.platform:etendo-core:latest.release\")
                }
              """

              sh """
              cd etendo_base
              echo '${buildGradleContent}' >> build.gradle
              cat build.gradle
              """
              
              echo "---------------- Build & Compile ----------------"
              sh """
              cd etendo_base
              mkdir modules
              cd modules
              git clone https://github.com/etendosoftware/com.etendoerp.docker.git
              cd com.etendoerp.docker
              git checkout ${GIT_COMMIT}
              cd ../..
              ./gradlew prepareConfig
              ./gradlew setup
              ./gradlew resources.up -Pcontext.name=${CONTEXT_NAME}
              """

              echo "---------------- Verifying Docker Containers ----------------"
              def dockerPsOutput = sh(script: 'docker ps', returnStdout: true)
              if (!dockerPsOutput.contains("etendo-db-1")) {
                error("The etendo-db-1 container is not running")
              }

              echo "---------------- Docker Containers are running ----------------"
              
              sh """
              cd etendo_base
              ./gradlew resources.stop -Pcontext.name=${CONTEXT_NAME}
              """
              
              echo "---------------- Cleaning Docker Containers ----------------"
              sh """
              cd etendo_base
              ./gradlew resources.down -Pcontext.name=${CONTEXT_NAME}
              """
              
              dockerPsOutput = sh(script: 'docker ps', returnStdout: true)
              if (dockerPsOutput.contains("etendo-db-1")) {
                error("The etendo-db-1 container still running")
              }

              currentBuild.result = SUCCESS
            } catch (Exception e) {
              echo "---------------- Build environment Failed ----------------"
              echo "Exception occurred: " + e.toString()
              currentBuild.result = FAILED
              error('Build Failed')
            }
          }
        }
      }
    }
  }
  
  post {
    fixed {
      mail to: EMAIL_ADDRESS,
      subject: "âœ… FIXED - ${currentBuild.fullDisplayName}",
      body: """
${new Date()}
__________________________________________________________

âœ… ERRORS FIXED âœ…

This is a compatibility test of etendo_base execution with all installed bundles.

The problems found in the previous run/s have been fixed!  ðŸ’ª
Check out the output in the following link: 
${env.BUILD_URL}
__________________________________________________________
        """
    }
    failure {
      mail to: EMAIL_ADDRESS,
      subject: "ðŸš« ERROR IN ${currentBuild.fullDisplayName}",
      body:  """
${new Date()}
__________________________________________________________

ðŸš« BUILD FAILED ðŸš«

This is a compatibility test of etendo_base execution with all installed bundles.

The build has failed unexpectedly.
To more information on the failing run visit: ${env.BUILD_URL}

__________________________________________________________
      """
    }
  }
}
