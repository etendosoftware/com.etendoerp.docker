
ext.composeDir = "$buildDir/compose"
ext.composeFilesPattern = '**/compose/*.yml'

task generateEnvFile {
    description = 'Converts gradle.properties configurations into a .env file in build/compose/.env'
    group = 'Docker'

    doLast {
        def propertiesFile = file('gradle.properties')
        def envFile = file("$composeDir/.env")

        if (!propertiesFile.exists()) {
            throw new GradleException("gradle.properties file not found")
        }

        def properties = new Properties()
        propertiesFile.withInputStream { input ->
            properties.load(input)
        }

        if (!envFile.parentFile.exists()) {
            envFile.parentFile.mkdirs()
        }

        envFile.withWriter { writer ->
            properties.each { key, value ->
                def envKey = key.toString().toUpperCase().replace('.', '_')
                writer.write("${envKey}=${value}\n")
            }
        }
        println "Generated .env file at: $envFile"
    }
}

task copyComposeFiles {
    description = 'Finds all Docker Compose YAML files and copies them to build/compose'
    group = 'Docker'
    dependsOn 'generateEnvFile'

    doLast {
        def destDir = file(composeDir)
        if (!destDir.exists()) {
            destDir.mkdirs()
        }

        fileTree(dir: 'modules', include: composeFilesPattern).each { file ->
            println "Copying Docker Compose file: $file"
            copy {
                from file
                into destDir
            }
        }
    }
}

def executeDockerComposeCommand(String action) {
    def composeFiles = fileTree(dir: composeDir, include: '*.yml').files
    if (composeFiles.empty) {
        throw new GradleException("No Docker Compose files found in $composeDir")
    }

    def command = ['docker', 'compose']
    composeFiles.each { file ->
        command << '-f' << file.absolutePath
    }
    action.split(" ").each { arg ->
        command << arg
    }

    println "Running: $command"
    exec {
        commandLine command
    }
}

task "resources.up" {
    description = 'Runs docker compose to bring up the Docker services'
    group = 'Docker'
    dependsOn copyComposeFiles

    doLast {
        executeDockerComposeCommand('up -d')
    }
}

task "resources.down" {
    description = 'Runs docker compose to bring down the Docker services'
    group = 'Docker'
    dependsOn copyComposeFiles

    doLast {
        executeDockerComposeCommand('down')
    }
}

task "resources.stop" {
    description = 'Runs docker compose to stop the Docker services'
    group = 'Docker'
    dependsOn copyComposeFiles

    doLast {
        executeDockerComposeCommand('stop')
    }
}
