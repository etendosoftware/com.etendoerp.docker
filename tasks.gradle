ext.composeDir = "$buildDir/compose"
ext.composeFilesPattern = '**/compose/*.yml'
def propertiesFile = 'gradle.properties'

ext.isBBDDEnabled = project.hasProperty("docker.bbdd.enabled") ? project.property("docker.bbdd.enabled").toString() : "true"
ext.isTomcatEnabled = false

ext.envFile = { ->
    def envFile = file("$composeDir/.env")
    if (!envFile.parentFile.exists()) {
        envFile.parentFile.mkdirs()
    }
    if (!file(propertiesFile).exists()) {
        throw new GradleException("gradle.properties file not found")
    }
    def properties = new Properties()
    file(propertiesFile).withInputStream { input ->
        properties.load(input)
    }
    return [properties: properties, envFile: envFile]
}

task generateEnvFile {
    description = 'Converts gradle.properties configurations into a .env file in build/compose/.env'
    group = 'Docker'

    doLast {
        def volumesPathKey = 'volumes.path'
        def props = envFile()
        def env = props.envFile
        def properties = props.properties
        env.withWriter { writer ->
            properties.each { key, value ->
                if (key == volumesPathKey) {
                    return
                }
                def envKey = key.toString().replaceAll(/([a-z])([A-Z])/, '$1_$2').toUpperCase().replace('.', '_')
                writer.write("${envKey}=${value}\n")
            }
            def volumesPath = properties.getProperty(volumesPathKey, "$buildDir/../volumes")
            writer.write("VOLUMES_PATH=${volumesPath}\n")
            if (isBBDDEnabled) {
                writer.write("DOCKER_BBDD_PROFILE=default\n")
            } else {
                writer.write("DOCKER_BBDD_PROFILE=disabled\n")
            }
            new File(volumesPath).mkdirs()
        }
        println "Generated .env file at: $env"
    }
}

task copyComposeFiles {
    description = 'Finds all Docker Compose YAML files and copies them to build/compose'
    group = 'Docker'
    dependsOn 'generateEnvFile'

    doLast {
        def destDir = file(composeDir)
        if (!destDir.exists()) {
            destDir.mkdirs()
        }
        def dirs = ['modules', "${buildDir}/etendo/modules"]
        dirs.each { dir ->
            {
                fileTree(dir: dir, include: composeFilesPattern).each { file ->
                    println "Copying Docker Compose file: $file"
                    copy {
                        from file
                        into destDir
                    }
                    if (file.name.contains("com.etendoerp.tomcat")) {
                        isTomcatEnabled = true
                    }
                }
            }
        }

        destDir.eachFileMatch(~/.*\.yml/) { file ->
            file.text = file.text.replace('{CONFIG_URL}', isTomcatEnabled ? "tomcat" : "host.docker.internal")
        }

    }
}

def executeDockerComposeCommand(String action) {
    def composeFiles = fileTree(dir: composeDir, include: '*.yml').files
    if (composeFiles.empty) {
        throw new GradleException("No Docker Compose files found in $composeDir")
    }

    def command = ['docker', 'compose', "--profile", "default"]
    composeFiles.each { file ->
        command << '-f' << file.absolutePath
    }
    action.split(" ").each { arg ->
        command << arg
    }

    println "Running: $command"
    exec {
        commandLine command
    }
}

task "resources.up" {
    description = 'Runs docker compose to bring up the Docker services'
    group = 'Docker'
    dependsOn copyComposeFiles

    doLast {
        executeDockerComposeCommand('up -d')
    }
}

task "resources.down" {
    description = 'Runs docker compose to bring down the Docker services'
    group = 'Docker'
    dependsOn copyComposeFiles

    doLast {
        executeDockerComposeCommand('down')
    }
}

task "resources.stop" {
    description = 'Runs docker compose to stop the Docker services'
    group = 'Docker'
    dependsOn copyComposeFiles

    doLast {
        executeDockerComposeCommand('stop')
    }
}
