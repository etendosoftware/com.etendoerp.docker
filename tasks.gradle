plugins {
    id 'base'
}

def composeDir = "$buildDir/compose"
def composeFilesPattern = '**/compose/*.yml'

task copyComposeFiles {
    description = 'Finds all Docker Compose YAML files and copies them to build/compose'
    group = 'Docker'

    doLast {
        def destDir = file(composeDir)
        if (!destDir.exists()) {
            destDir.mkdirs()
        }

        fileTree(dir: 'modules', include: composeFilesPattern).each { file ->
            println "Copying Docker Compose file: $file"
            copy {
                from file
                into destDir
            }
        }
    }
}

def executeDockerComposeCommand(action) {
    def composeFiles = fileTree(dir: composeDir, include: '*.yml').files
    if (composeFiles.empty) {
        throw new GradleException("No Docker Compose files found in $composeDir")
    }

    def command = ['docker', 'compose']
    composeFiles.each { file ->
        command << '-f' << file.absolutePath
    }
    command << action

    println "Running: $command"
    exec {
        commandLine command
    }
}

task "resources.up" {
    description = 'Runs docker compose to bring up the Docker services'
    group = 'Docker'
    dependsOn copyComposeFiles

    doLast {
        executeDockerComposeCommand('up -d')
    }
}

task "resources.down" {
    description = 'Runs docker compose to bring down the Docker services'
    group = 'Docker'
    dependsOn copyComposeFiles

    doLast {
        executeDockerComposeCommand('down')
    }
}

task "resources.stop" {
    description = 'Runs docker compose to stop the Docker services'
    group = 'Docker'
    dependsOn copyComposeFiles

    doLast {
        executeDockerComposeCommand('stop')
    }
}
